Certainly! Here's a more complete and organized code snippet incorporating the custom filter into a Spring Boot application:

1. **Custom Authorization Filter:**
```java
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class CustomAuthorizationFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain
    ) throws ServletException, IOException {
        String authToken = request.getHeader("Authorization");
        if (isValidAuthToken(authToken)) {
            Authentication authentication = // Create an Authentication object based on your logic
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }

        filterChain.doFilter(request, response);
    }

    private boolean isValidAuthToken(String authToken) {
        return authToken != null && authToken.startsWith("Bearer ");
    }
}
```

2. **Security Configuration:**
```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Bean
    public CustomAuthorizationFilter customAuthorizationFilter() {
        return new CustomAuthorizationFilter();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .addFilterBefore(customAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class)
            .authorizeRequests()
                .antMatchers("/api/example").authenticated()
                .and()
            .httpBasic()
                .and()
            .csrf().disable(); // Disable CSRF for simplicity, consider enabling it in a production environment
    }
}
```

This example assumes a simple scenario where you're checking the presence of a "Bearer" token in the "Authorization" header. You'll need to customize the `isValidAuthToken` method and the creation of the `Authentication` object based on your specific authentication logic.

Remember to adapt the code according to your actual authentication and authorization requirements.