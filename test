In Angular, you can pass data between two components using input properties, output properties, or a shared service.

1. **Using Input Properties:**
   - In the parent component, bind a property to the child component using property binding.
   - In the child component, use `@Input` decorator to receive the data.

   Example:
   ```typescript
   // parent.component.ts
   export class ParentComponent {
     dataToChild = "Hello from parent!";
   }
   ```

   ```html
   <!-- parent.component.html -->
   <app-child [inputData]="dataToChild"></app-child>
   ```

   ```typescript
   // child.component.ts
   import { Input } from '@angular/core';

   export class ChildComponent {
     @Input() inputData: string;
   }
   ```

2. **Using Output Properties:**
   - In the child component, use `@Output` decorator to emit events.
   - In the parent component, bind to the child's output and handle the emitted event.

   Example:
   ```typescript
   // child.component.ts
   import { Output, EventEmitter } from '@angular/core';

   export class ChildComponent {
     @Output() dataEvent = new EventEmitter<string>();

     sendDataToParent() {
       this.dataEvent.emit("Hello from child!");
     }
   }
   ```

   ```html
   <!-- child.component.html -->
   <button (click)="sendDataToParent()">Send Data</button>
   ```

   ```typescript
   // parent.component.ts
   export class ParentComponent {
     receiveDataFromChild(data: string) {
       console.log(data);
     }
   }
   ```

   ```html
   <!-- parent.component.html -->
   <app-child (dataEvent)="receiveDataFromChild($event)"></app-child>
   ```

3. **Using a Shared Service:**
   - Create a service to store and share data between components.

   Example:
   ```typescript
   // data.service.ts
   import { Injectable } from '@angular/core';
   import { BehaviorSubject } from 'rxjs';

   @Injectable({
     providedIn: 'root',
   })
   export class DataService {
     private sharedData = new BehaviorSubject<string>('');
     currentData = this.sharedData.asObservable();

     updateData(data: string) {
       this.sharedData.next(data);
     }
   }
   ```

   Use this service in both parent and child components to share and update data.

Remember to provide the necessary imports and to declare the components in the appropriate modules.