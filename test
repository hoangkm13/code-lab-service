I apologize for the confusion. It seems like the ordering approach may not work as expected in this case. If you're still facing issues, you can try the following alternative approach:

```java
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.jpa.repository.JpaRepository;

public interface YourEntityRepository extends JpaRepository<YourEntity, Long> {

    @Query("SELECT e.columnName " +
           "FROM YourEntity e " +
           "ORDER BY " +
           "  CAST(SUBSTRING_INDEX(e.columnName, '.', 1) AS UNSIGNED) DESC, " +
           "  CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(e.columnName, '.', -2), '.', 1) AS UNSIGNED) DESC, " +
           "  CAST(SUBSTRING_INDEX(e.columnName, '.', -1) AS UNSIGNED) DESC " +
           "LIMIT 1")
    String findMaxXYZPattern();
}
```

This query selects only the `columnName` and uses `LIMIT 1` to retrieve only the top result, which should be the maximum version. Ensure that you replace `YourEntity` with your actual entity class name and adjust the column names based on your specific case.